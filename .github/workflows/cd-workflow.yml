name: cd-workflow

on:
  workflow_dispatch:
  workflow_run:
    workflows: ["ci-workflow"]
    types:
      - completed

permissions:
  contents: read
  actions: read
  packages: write

jobs:
  on-success:
    name: prompt flow deployment job
    runs-on: ubuntu-latest
    environment: ${{ vars.TMP_ENV }}

    if: ${{ github.event_name == 'workflow_dispatch' || (github.event.workflow_run.conclusion == 'success' && github.event.workflow_run.head_branch == 'main') }}

    steps:
      - name: Checkout Actions
        uses: actions/checkout@v4

      - name: Azure login
        uses: azure/login@v2.1.1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Load Secrets from Azure Key Vault
        uses: ./.github/actions/load-secrets
        with:
          azureKeyVaultName: ${{ vars.KEY_VAULT_NAME }}

      - name: Set up Python Env
        uses: ./.github/actions/setup-environment

      - name: Create .env file
        run: |
          echo "${{ secrets.env_vars }}" >> .env
            for var in $(cat .env); do
              echo "$var" >> $GITHUB_ENV
            done
      - name: load .env file
        run: poetry run python -c "from dotenv import load_dotenv; load_dotenv()"
      - name: load the current Azure subscription details
        id: subscription_details
        shell: bash
        run: |
          export subscriptionId=$(az account show --query id -o tsv)
          echo "SUBSCRIPTION_ID=$subscriptionId" >> $GITHUB_OUTPUT
      - name: copy to inference
        run: |
          cp -r src promptflow/inference
          cp -r promptflow/prompts promptflow/inference

      #=====================================
      # Registers the flow in Azure ML registry
      # Writes latest model version to model_version.txt file.
      # model_version.txt file is read in next step
      #=====================================
      - name: Register flow as model in AzureML
        uses: ./.github/actions/execute-script
        with:
          step_name: "Register flow as model in AzureML"
          script_parameter: |
            python -m llmops.common.deployment.register_model \
            --subscription_id ${{ env.AZURE_SUBSCRIPTION_ID }} \
            --base_path ${{ vars.PROMPTFLOW_BASE_PATH }} \
            --output_file "model_version.txt" \
            --build_id ${{ github.run_id }} \
            --env_name ${{ vars.TMP_ENV }} \

      #=====================================
      # Reads model_version.txt file. Assigns it to variable MODEL_VERSION
      # MODEL_VERSION Used in next step for deployment
      #=====================================
      - name: Read registered flow latest version
        shell: bash
        run: |
          readarray arr <"model_version.txt"
          model_version=${arr[0]}
          echo $model_version
          echo "MODEL_VERSION=${model_version}"  >> "$GITHUB_ENV"

      #=====================================
      # Executes managed deployment when parameter DEPLOYMENT_TARGET == 'aml'
      # Reads 'azure_managed_endpoint' field values from deployment_config.json
      #=====================================
      - name: Deploy to Managed endpoint
        if: ${{ vars.DEPLOYMENT_TARGET == 'aml'  }}
        uses: ./.github/actions/deploy-aml
        with:
          AZURE_SUBSCRIPTION_ID: ${{ env.AZURE_SUBSCRIPTION_ID }}
          use_case_base_path: ${{ vars.PROMPTFLOW_BASE_PATH }}
          MODEL_VERSION: ${{ env.MODEL_VERSION }}
          DEPLOY_ENVIRONMENT: ${{ vars.TMP_ENV }}
          RESOURCE_GROUP_NAME: ${{ env.RESOURCE_GROUP_NAME }}
          WORKSPACE_NAME: ${{ env.WORKSPACE_NAME }}
          KEY_VAULT_NAME: ${{ vars.KEY_VAULT_NAME }}

      #=====================================
      # Creates local pf connections when deployment type is webapp
      # Uses secret CONNECTION_DETAILS for creating connections
      #=====================================
      - name: Create local PF Connections
        if: ${{ vars.DEPLOYMENT_TARGET == 'webapp'  }}
        uses: ./.github/actions/execute-script
        with:
          step_name: "Create local PF connections"
          script_parameter: |
            python -m llmops.common.prompt_local_connections \
              --env_name ${{ vars.TMP_ENV }} \
              --base_path ${{ vars.PROMPTFLOW_BASE_PATH }} \

      - name: Read .env file
        id: env_vars
        run: |
          LOCAL_VARS=$(cat .env)
          echo "local_vars=$LOCAL_VARS" >> $GITHUB_OUTPUT

        #=====================================
        # Executes Azure Webapp deployment when parameter
        # DEPLOYMENT_TARGET == 'webapp' using docker image
        # Reads 'webapp_endpoint' field values from deployment_config.json
        #=====================================
      - name: Deploy to webapp
        if: ${{ vars.DEPLOYMENT_TARGET == 'webapp'  }}
        uses: ./.github/actions/deploy-webapp
        with:
          USE_CASE_BASE_PATH: ${{ vars.PROMPTFLOW_BASE_PATH }}
          DEPLOY_ENVIRONMENT: ${{ vars.TMP_ENV }}
          REGISTRY_DETAILS: ${{ env.DOCKER_IMAGE_REGISTRY }}
