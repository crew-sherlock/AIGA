name: cd-workflow

on:
  workflow_call:
    inputs:
      env_name:
        type: string
        description: "Execution Environment"
        required: true
      use_case_base_path:
        type: string
        description: "The flow use-case to execute"
        required: true
      deployment_type:
        type: string
        description: "Determine type of deployment - aml, webapp"
        required: true
    secrets:
      azure_credentials:
        description: "service principal auth to Azure"
        required: true
      registry_details:
        description: "prompt flow registry details"
        required: false
      azure_openai_api_key:
        description: "azure openai key"
        required: true
      azure_openai_api_endpoint:
        description: "azure openai endpoint"
        required: true
      aoai_api_key:
        description: "aoai key"
        required: true
      aoai_api_base:
        description: "aoai base path"
        required: true

jobs:
  flow-deployment:
    name: prompt flow deployment job
    runs-on: ubuntu-latest
    environment:
      name: ${{ inputs.env_name }}
    env:
        RESOURCE_GROUP_NAME: ${{ vars.RESOURCE_GROUP_NAME }}
        WORKSPACE_NAME: ${{ vars.WORKSPACE_NAME }}
        AZURE_SUBSCRIPTION_ID: ${{ vars.SUBSCRIPTION_ID }}
        AZURE_OPENAI_API_KEY: ${{ secrets.azure_openai_api_key }}
        AZURE_OPENAI_API_ENDPOINT: ${{ secrets.azure_openai_api_endpoint }}
        AOAI_API_KEY: ${{ secrets.aoai_api_key }}
        AOAI_API_BASE: ${{ secrets.aoai_api_base }}
    steps:
      - name: Checkout Actions
        uses: actions/checkout@v4

      - name: Azure login
        uses: azure/login@v2.1.1
        with:
          creds: ${{ secrets.azure_credentials }}

      - name: Set up Python Env
        uses: ./.github/actions/setup-environment
        with:
          use_case_base_path: ${{ inputs.use_case_base_path }}

      - name: Create .env file
        run: |
          echo "${{ secrets.env_vars }}" >> .env
            for var in $(cat .env); do
              echo "$var" >> $GITHUB_ENV
            done
      - name: load .env file
        run: poetry run python -c "from dotenv import load_dotenv; load_dotenv()"
      - name: load the current Azure subscription details
        id: subscription_details
        shell: bash
        run: |
          export subscriptionId=$(az account show --query id -o tsv)
          echo "SUBSCRIPTION_ID=$subscriptionId" >> $GITHUB_OUTPUT

      #=====================================
      # Registers the flow in Azure ML registry
      # Writes latest model version to model_version.txt file.
      # model_version.txt file is read in next step
      #=====================================
      - name: Register flow as model in AzureML
        uses: ./.github/actions/execute-script
        with:
          step_name: "Register flow as model in AzureML"
          script_parameter: |
            python -m llmops.common.deployment.register_model \
            --subscription_id ${{ env.AZURE_SUBSCRIPTION_ID }} \
            --base_path ${{ inputs.use_case_base_path }} \
            --output_file "model_version.txt" \
            --build_id ${{ github.run_id }} \
            --env_name ${{ inputs.env_name }} \

      #=====================================
      # Reads model_version.txt file. Assigns it to variable MODEL_VERSION
      # MODEL_VERSION Used in next step for deployment
      #=====================================
      - name: Read registered flow latest version
        shell: bash
        run: |
          readarray arr <"model_version.txt"
          model_version=${arr[0]}
          echo $model_version
          echo "MODEL_VERSION=${model_version}"  >> "$GITHUB_ENV"

      #=====================================
      # Executes managed deployment when parameter deployment_type == 'aml'
      # Reads 'azure_managed_endpoint' field values from deployment_config.json
      #=====================================
      - name: Deploy to Managed endpoint
        if: ${{ inputs.deployment_type == 'aml'  }}
        uses: ./.github/actions/deploy-aml
        with:
          SUBSCRIPTION_ID: ${{ env.AZURE_SUBSCRIPTION_ID }}
          use_case_base_path: ${{ inputs.use_case_base_path }}
          DEPLOY_ENVIRONMENT: ${{ inputs.env_name }}
          RESOURCE_GROUP_NAME: ${{ vars.RESOURCE_GROUP_NAME }}
          WORKSPACE_NAME: ${{ vars.WORKSPACE_NAME }}
          KEY_VAULT_NAME: ${{ vars.KEY_VAULT_NAME }}
          MODEL_VERSION: ${{ env.MODEL_VERSION }}
          ENV_VARS: ${{ secrets.env_vars }}

      #=====================================
      # Creates local pf connections when deployment type is webapp
      # Uses secret CONNECTION_DETAILS for creating connections
      #=====================================
      - name: Create local PF Connections
        if: ${{ inputs.deployment_type == 'webapp'  }}
        uses: ./.github/actions/execute-script
        with:
          step_name: "Create local PF connections"
          script_parameter: |
            python -m llmops.common.prompt_local_connections \
              --env_name ${{ inputs.env_name }} \
              --base_path ${{ inputs.use_case_base_path }} \

      - name: Read .env file
        id: env_vars
        run: |
          LOCAL_VARS=$(cat .env)
          echo "local_vars=$LOCAL_VARS" >> $GITHUB_OUTPUT

        #=====================================
        # Executes Azure Webapp deployment when parameter
        # deployment_type == 'webapp' using docker image
        # Reads 'webapp_endpoint' field values from deployment_config.json
        #=====================================
      - name: Deploy to webapp
        if: ${{ inputs.deployment_type == 'webapp'  }}
        uses: ./.github/actions/deploy-webapp
        with:
          USE_CASE_BASE_PATH: ${{ inputs.use_case_base_path }}
          DEPLOY_ENVIRONMENT: ${{ inputs.env_name }}
          ENV_VARS: ${{ steps.env_vars.outputs.local_vars }}
        env:
          REGISTRY_DETAILS: ${{ secrets.registry_details }}
