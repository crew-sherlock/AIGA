name: reusable-cd-workflow

on:
  workflow_call:
    inputs:
      environment:
        description: "The environment to run the workflow with (playground, dev, uat, prod)"
        type: string
        required: true
      checkout_sha_ref:
        description: "The sha ref to the code to checkout for this deployment"
        type: string
        required: true
    secrets:
      AZURE_CREDENTIALS:
        description: "service principal authentication to Azure"
        required: true

permissions:
  contents: read
  packages: write

jobs:
  deploy:
    name: prompt flow deployment job
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}

    steps:
      - name: Checkout workflow_run
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.workflow_run.head_sha }}

      - name: Azure login
        uses: azure/login@v2.1.1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Load Secrets from Azure Key Vault
        uses: ./.github/actions/load-secrets
        with:
          azureKeyVaultName: ${{ vars.KEY_VAULT_NAME }}

      - name: Set up Python Env
        uses: ./.github/actions/setup-environment

      - name: Create .env file
        run: |
          echo "${{ secrets.env_vars }}" >> .env
            for var in $(cat .env); do
              echo "$var" >> $GITHUB_ENV
            done
      - name: load .env file
        run: poetry run python -c "from dotenv import load_dotenv; load_dotenv()"
      - name: load the current Azure subscription details
        id: subscription_details
        shell: bash
        run: |
          export subscriptionId=$(az account show --query id -o tsv)
          echo "SUBSCRIPTION_ID=$subscriptionId" >> $GITHUB_OUTPUT
          echo "AML_AZURE_SUBSCRIPTION_ID=$subscriptionId" >> $GITHUB_OUTPUT
      - name: copy to inference
        run: |
          cp -r src promptflow/inference
          cp -r promptflow/prompts promptflow/inference

      #=====================================
      # Registers the flow in Azure ML registry
      # Writes latest model version to model_version.txt file.
      # model_version.txt file is read in next step
      #=====================================
      - name: Register flow as model in AzureML
        uses: ./.github/actions/execute-script
        with:
          step_name: "Register flow as model in AzureML"
          script_parameter: |
            python -m llmops.common.deployment.register_model \
            --subscription_id ${{ env.AML_AZURE_SUBSCRIPTION_ID }} \
            --base_path ${{ vars.PROMPTFLOW_BASE_PATH }} \
            --output_file "model_version.txt" \
            --build_id ${{ github.run_id }} \
            --env_name ${{ inputs.environment }}

      #=====================================
      # Reads model_version.txt file. Assigns it to variable MODEL_VERSION
      # MODEL_VERSION Used in next step for deployment
      #=====================================
      - name: Read registered flow latest version
        shell: bash
        run: |
          readarray arr <"model_version.txt"
          model_version=${arr[0]}
          echo $model_version
          echo "MODEL_VERSION=${model_version}"  >> "$GITHUB_ENV"

      #=====================================
      # Executes managed deployment when parameter DEPLOYMENT_TARGET == 'aml'
      # Reads 'azure_managed_endpoint' field values from deployment_config.json
      #=====================================
      - name: Deploy to Managed endpoint
        if: ${{ vars.DEPLOYMENT_TARGET == 'aml' || vars.DEPLOYMENT_TARGET == 'both' }}
        uses: ./.github/actions/deploy-aml
        with:
          AML_AZURE_SUBSCRIPTION_ID: ${{ env.AML_AZURE_SUBSCRIPTION_ID }}
          use_case_base_path: ${{ vars.PROMPTFLOW_BASE_PATH }}
          MODEL_VERSION: ${{ env.MODEL_VERSION }}
          DEPLOY_ENVIRONMENT: ${{ inputs.environment }}
          AML_RESOURCE_GROUP_NAME: ${{ env.AML_RESOURCE_GROUP_NAME }}
          AML_WORKSPACE_NAME: ${{ env.AML_WORKSPACE_NAME }}
          KEY_VAULT_NAME: ${{ vars.KEY_VAULT_NAME }}

      - name: Read .env file
        id: env_vars
        run: |
          LOCAL_VARS=$(cat .env)
          echo "local_vars=$LOCAL_VARS" >> $GITHUB_OUTPUT

        #=====================================
        # Executes Azure Webapp deployment when parameter
        # DEPLOYMENT_TARGET == 'webapp' using docker image
        # Reads 'webapp_endpoint' field values from deployment_config.json
        #=====================================
      - name: Deploy to webapp
        if: ${{ vars.DEPLOYMENT_TARGET == 'webapp' || vars.DEPLOYMENT_TARGET == 'both' }}
        uses: ./.github/actions/deploy-webapp
        with:
          USE_CASE_BASE_PATH: ${{ vars.PROMPTFLOW_BASE_PATH }}
          DEPLOY_ENVIRONMENT: ${{ inputs.environment }}
          DOCKER_IMAGE_REGISTRY: ${{ env.DOCKER_IMAGE_REGISTRY }}
          AZURE_CLIENT_ID: ${{ env.AZURE_CLIENT_ID }}
          AZURE_CLIENT_SECRET: ${{ env.AZURE_CLIENT_SECRET }}
          WA_AZURE_SUBSCRIPTION_ID: ${{ env.WA_AZURE_SUBSCRIPTION_ID }}
          WA_RESOURCE_GROUP_NAME: ${{ env.WA_RESOURCE_GROUP_NAME }}
          WA_NAME: ${{ env.WA_NAME }}
